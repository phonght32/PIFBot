;; Auto-generated. Do not edit!


(when (boundp 'turtlebot3_example::Turtlebot3Goal)
  (if (not (find-package "TURTLEBOT3_EXAMPLE"))
    (make-package "TURTLEBOT3_EXAMPLE"))
  (shadow 'Turtlebot3Goal (find-package "TURTLEBOT3_EXAMPLE")))
(unless (find-package "TURTLEBOT3_EXAMPLE::TURTLEBOT3GOAL")
  (make-package "TURTLEBOT3_EXAMPLE::TURTLEBOT3GOAL"))

(in-package "ROS")
;;//! \htmlinclude Turtlebot3Goal.msg.html
(if (not (find-package "GEOMETRY_MSGS"))
  (ros::roseus-add-msgs "geometry_msgs"))


(defclass turtlebot3_example::Turtlebot3Goal
  :super ros::object
  :slots (_goal ))

(defmethod turtlebot3_example::Turtlebot3Goal
  (:init
   (&key
    ((:goal __goal) (instance geometry_msgs::Vector3 :init))
    )
   (send-super :init)
   (setq _goal __goal)
   self)
  (:goal
   (&rest __goal)
   (if (keywordp (car __goal))
       (send* _goal __goal)
     (progn
       (if __goal (setq _goal (car __goal)))
       _goal)))
  (:serialization-length
   ()
   (+
    ;; geometry_msgs/Vector3 _goal
    (send _goal :serialization-length)
    ))
  (:serialize
   (&optional strm)
   (let ((s (if strm strm
              (make-string-output-stream (send self :serialization-length)))))
     ;; geometry_msgs/Vector3 _goal
       (send _goal :serialize s)
     ;;
     (if (null strm) (get-output-stream-string s))))
  (:deserialize
   (buf &optional (ptr- 0))
   ;; geometry_msgs/Vector3 _goal
     (send _goal :deserialize buf ptr-) (incf ptr- (send _goal :serialization-length))
   ;;
   self)
  )

(setf (get turtlebot3_example::Turtlebot3Goal :md5sum-) "8ad3bd0e46ff6777ce7cd2fdd945cb9e")
(setf (get turtlebot3_example::Turtlebot3Goal :datatype-) "turtlebot3_example/Turtlebot3Goal")
(setf (get turtlebot3_example::Turtlebot3Goal :definition-)
      "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======
# Define the goal
geometry_msgs/Vector3 goal

================================================================================
MSG: geometry_msgs/Vector3
# This represents a vector in free space. 
# It is only meant to represent a direction. Therefore, it does not
# make sense to apply a translation to it (e.g., when applying a 
# generic rigid transformation to a Vector3, tf2 will only apply the
# rotation). If you want your data to be translatable too, use the
# geometry_msgs/Point message instead.

float64 x
float64 y
float64 z
")



(provide :turtlebot3_example/Turtlebot3Goal "8ad3bd0e46ff6777ce7cd2fdd945cb9e")


